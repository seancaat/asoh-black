//1 to preserve memory, should maybe do 2, three sets of symbols and cycle through
// or if press during
function setupRisingCircle(src, minRadius, maxRadius) {
  var rasterImg = new Raster(src);
  return new SymbolDefinition(rasterImg).place(new Point(Math.random() * width, height + minRadius + maxRadius));
}

function rise(width, height) {
  var imgs = [
    "<%= asset_path('Mask-Group-1.png') %>",
    "<%= asset_path('Mask-Group-2.png') %>",
    "<%= asset_path('Mask-Group-3.png') %>",
    "<%= asset_path('Mask-Group-4.png') %>",
    "<%= asset_path('Mask-Group-5.png') %>",
    "<%= asset_path('Mask-Group-6.png') %>",
    "<%= asset_path('Mask-Group-7.png') %>",
    "<%= asset_path('Mask-Group-8.png') %>",
    "<%= asset_path('Mask-Group-9.png') %>",
    "<%= asset_path('Mask-Group.png') %>"
  ];
  var minRadius = width / 20;
  var maxRadius = width / 8;

  for (var i = 0; i < imgs.length; i++) {
    let rasterCircle = setupRisingCircle(imgs[i], minRadius, maxRadius);
    enterExit(rasterCircle, i + rasterCircle.bounds.width/5);

    function enterExit(path, offset) {
      setTimeout(function() {
        path.tween(
          { 'position.y': Math.random() * height, rotation: "+=96" },
          {
            easing: 'easeOutCubic',
            duration: 400 - (10 * path.bounds.width) / offset
          }
        );
      }, offset);

      setTimeout(function() {
        path.tween(
          { 'position.y': height + minRadius + 2 * maxRadius, rotation: "+=45" },
          { easing: 'easeInQuad', duration: 400 - path.bounds.width / offset }
        );
      }, offset + 50 + 5 * 75);
    }
  }
}
